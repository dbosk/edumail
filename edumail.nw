\documentclass[a4paper,10pt,article,oneside,oldfontcommands]{memoir}
\let\subsubsection\subsection
\let\subsection\section
\let\section\chapter

\input{preamble.tex}
\noweboptions{longxref,breakcode}

\usepackage[noamsthm,notheorems]{beamerarticle}
\setjobnamebeamerversion{slides}

%\usepackage{authblk}
%\let\institute\affil

\title{%
  Mail utilities for education
}
\author{%
  Daniel Bosk
}
\institute{%
  KTH EECS
}

\begin{document}
\maketitle

\begin{abstract}
  \input{abstract.tex}
\end{abstract}
\vfill
\inputminted[numbers=none]{text}{LICENSE}
\clearpage

\tableofcontents
\clearpage

@
\section{Introduction}

This is the documentation of the [[<<edumail.sh>>]] bash script.
The idea is that it's a command that works like Git with different subcommands.
We'll use a simple construction to achieve this.

\subsection{Structural overview}

We'll start with a [[<<edumail.sh>>]] script that contains the main function.
This function will parse the first argument as the subcommand to call.
Then it will call that subcommand function with the rest of the arguments.

We'll execute the [[main]] function if the script is not sourced.
This way, we can source the script and use the functions directly in the 
current shell.
<<edumail.sh>>=
#!/bin/bash
# This file is generated from edumail.nw.

<<variables>>
<<functions>>

main() {
  <<parse which subcommand should be called and call its function>>
}

# call main if not sourced
# https://stackoverflow.com/a/28776166/1305099
(return 0 2>/dev/null) || main "$@"
@

\subsection{Invoke right subcommand function}

The first argument ([[$1]]) should be the subcommand.
This should be the same as the name of its function.
This way we can simply shift the arguments and call that function,
then it can parse the rest of the arguments as it sees fit.
However, an easier way in this case is to simply evaluate [["$@"]],
this would have the same effect as shifting the arguments and calling the 
function.

If no subcommand is given, we print a usage message.
This should include a list of all subcommands.
<<parse which subcommand should be called and call its function>>=
[[ "$1" = "" ]] \
  && <<echo help text>> \
  || "$@"
<<echo help text>>=
echo -e "Usage: $0 [function] args\nFunctions:\n<<list all functions>>"
@

To get a list of all the functions, we simply grep them out of the script 
itself, given by [[$0]].
<<list all functions>>=
$(sed -En 's/^(\w+)\(\) \{/  \1/p' $0 | grep -Pv '^\s*main$')
@


\section{The results subcommands}

We want a set of subcommands that can be used to get a student's results from 
the course in question.
It will not get the student's actual results, but rather return lines that can 
fetch the results.

\begin{example}\label{email1}
An email from a student\footnote{%
  The student's identity is anonymized and the fictitious name has no 
  relation to any of the student's attributes (other than being a 
  student).%
} may look like the following.
The lines that are marked contain useful data.
\inputminted[highlightlines={2,5,11-12,14}]{text}{email1.txt}
This email should then yield the following output:
\begin{minted}{bash}
ladok student -c DD1317 -r \
  $(canvaslms users -sc DD1317 "Studenten Studentensson" -l | cut -f 3)
canvaslms submissions -c DD1317 \
  -u "Studenten Studentensson"
kthutils forms export restlabb23/24 \
  | grep "Studenten Studentensson"
\end{minted}
\end{example}

\begin{example}\label{email2}
Another email:
\inputminted[highlightlines={2,5,12}]{text}{email2.txt}
This email should then yield the following output:
\begin{minted}{bash}
ladok student -c XXX -r \
  $(canvaslms users -sc ".*" "^studenten@kth.se" -l | cut -f 3)
canvaslms submissions -c ".*" \
  -u "^studenten@kth.se" \
  -a "granskning"
kthutils forms export restlabb23/24 \
  | grep "Studenten Studentensdotter"
\end{minted}
\end{example}

We'll use this from Vim when we write the reply.
We should be able to pass a filename as argument.
That file should contain the email as shown in the examples above.
And it should generate the output as shown in the examples above to stdout.
The idea is then that we do
\begin{quote}
  [[.!edumail.sh results %]]
\end{quote}
on a blank line to get the output.
Then we can do
\begin{quote}
  [['<,'>!bash]]
\end{quote}
to select the relevant lines of the output to execute.

We'll add a subcommand for each of the lines in the output above.
One that focuses on the [[ladok]] command, one on [[canvaslms]] and the last on 
restlabb.
Then we'll let the [[results]] subcommand call these subcommands.

Tools like [[grep]] and [[sed]] are very useful because they either take a file 
as input or read from stdin.
So while we in most cases can read the email from a file, we also want to be 
able to pipe the email to the script.

The subcommand functions will usually be quite straight forward in considering 
this, but for the [[results]] subcommand we need each subcommand called to get 
the same input.
So we must ensure that each of the commands can read stdin, which we do with 
the function~[[file_or_stdin]].
<<functions>>=
results() {
  local file=$(file_or_stdin "$1")
  shift
  ladok "$file" "$@"
  canvas "$file" "$@"
  restlabb "$file" "$@"
  missing "$file" "$@"
  report "$file" "$@"
}
@

This function [[ladok]] will hide the [[ladok]] command from us, so that we 
can't use it.
However, this won't be an issue since we don't need to invoke it in this 
script.
We simply write [[ladok]] in the output.
And the execution will happen later in the editor.

\subsection{Overall algorithm}

All the subcommands will have to parse the email.
It's just that they try to get different data out of it.

The most efficient approach would be to parse the email only once.
During that round we extract all the data we need.
Then each out the functions can use that data to construct the output.

However, considering that we might call the subcommands directly, each 
subcommand must ensure the email has been parsed.
This speaks for a more independent design of each and, unfortunately, results 
in the email being parsed multiple times.
This has other advantages, such that in a future design of [[results]], we might 
check which of the subcommands are actually needed.

We'll write functions that extract different data from the email.
These can later be used in the subcommands to construct the output.

\subsection{Function design}

The functions will be designed to take a file as argument.
Or if the email is piped to the script, they will read from stdin.
To achieve this we can rely on the same idea as in the UNIX commands:
if they don't get any file as argument, they read from stdin.
(We can use [[/dev/stdin]] to read from stdin, but keep the structure of the 
code.)
Usually this will work, since we only parse the email once in each function.

However, sometimes we need to read stdin twice.
Then we need to keep a copy of the email in a temporary file.
We can do this by checking if the file argument is an empty string.
If it is, we create a temporary file and read from stdin into that file.
Then we pass the temporary file to the function.
<<functions>>=
file_or_stdin() {
  local file="$1"
  if [[ "$file" = "" ]]; then
    file=$(mktemp)
    cat > "$file"
  fi
  echo "$file"
}
@


\section{Extracting the student's identifier}

We'll start by extracting the student's name or institutional email address.
We prefer the institutional email address, but if that's not available we'll 
use the name.
The function will take the email file as an argument---however, if that is en 
empty string, we want to use stdin.
Since we want to use [[student_name]] if [[student_id]] fails, we need to 
ensure that the email file is passed or piped to both functions.
<<functions>>=
student() {
  local file=$(file_or_stdin "$1")
  student_id "$file" \
  || student_name "$file" \
  || any_email "$file"
}
@

To extract the email address, we want to extract the line starting with 
\enquote{To: }.
Then we want to extract the email address from that line.
This is because we're doing this when we reply to the email, thus the student's 
name and email are in the \enquote{To: } field.
We'll try to match a KTH email address.
<<functions>>=
student_id() {
  local file=$(file_or_stdin "$1")
  local email
  email=$(grep "^To: " "$file" \
          | sed -En "s/^To: [^<]**<?(${USER_FORMAT}@${DOMAIN})>?.*$/\1/p")
  if [[ -n "$email" ]]; then
    echo "$email"
    return 0
  else
    return 1
  fi
}
<<variables>>=
DOMAIN="([a-zA-Z0-9]+\.)?kth\.se"
USER_FORMAT="[a-zA-Z0-9]+"
@

If we didn't find an email address, we'll try to extract the student's name.
<<functions>>=
student_name() {
  local file=$(file_or_stdin "$1")
  local name
  name=$(grep "^To: " $file | sed 's/^To: //' | sed "s/ <.*//")
  if [[ -n "$name" ]]; then
    echo "$name"
    return 0
  else
    return 1
  fi
}
@

If we didn't find any useful data in the email headers,
we can also look for the email address anywhere in the email (body).
This is useful when we pipe text to the script, since then we don't necessarily 
include the headers.
<<functions>>=
any_email() {
  local file=$(file_or_stdin "$1")
  local email
  email=$(grep -Eo "${USER_FORMAT}@${DOMAIN}" "$file" | head -n 1)
  if [[ -n "$email" ]]; then
    echo "$email"
    return 0
  else
    return 1
  fi
}
@

Let's test this on the emails from the examples above.
Running [[student]] on \cref{email1} should yield the following output:
\begin{pycode}
import subprocess

def print_verbatim(output):
    print(r"\begin{verbatim}")
    print(output)
    print(r"\end{verbatim}")

output = subprocess.run(["./edumail", "student", "email1.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}
Running [[student_id]] on \cref{email2} should yield the following output:
\begin{pycode}
output = subprocess.run(["./edumail", "student", "email2.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}


\section{Extracting the course}

We'll now extract the course from the email.
It's probably too difficult to try to extract the course title.
But we can for sure extract the course code, since that is on a very specific 
format (\eg DD1317).
We can also extract the course's short name, in the case of DD1317 during 2023 
it would be prgi23.

\subsection{Cleaning irrelevant headers}

There are some lines that we don't want to match anything on.
For example, we don't want to match the email identifier in the [[In-Reply-To]] 
header and not the year in the [[Date]] header.
For this, we construct a filter which removes these lines.
<<functions>>=
clean() {
  local file=$(file_or_stdin "$1")
  grep -vE "^(${IGNORE_HEADERS})" "$file"
}
<<variables>>=
IGNORE_HEADERS="In-Reply-To:|References:|Message-ID:|Content-Type:"
IGNORE_HEADERS="${IGNORE_HEADERS}|^MIME-Version:|^X-Mailer:"
IGNORE_HEADERS="${IGNORE_HEADERS}|^User-Agent:|Date:"
@

We also don't want to match the reply line.
<<variables>>=
IGNORE_HEADERS="${IGNORE_HEADERS}|On .* wrote:$"
@

\subsection{Extracting course identifiers from clean email}

This leaves us with the following construction.
We first match for course codes, then for course nick names.
Since these may occur several times in the email, we'll sort them and remove 
duplicates.
Since this might output several lines, we'll make a disjunct regex.
We'll do this with [[make_disjunct_regex]] discussed below.
<<functions>>=
course() {
  local file=$(file_or_stdin "$1")
  (course_code "$file"; course_nick "$file") \
  | make_disjunct_regex
}

course_code() {
  local file=$(file_or_stdin "$1")
  clean "$file" \
  | grep -Eo "${COURSE_CODE}" \
  | sort -u
}

course_nick() {
  local file=$(file_or_stdin "$1")
  clean "$file" \
  | grep -Eo "${COURSE_NICK}" \
  | sort -u
}
<<variables>>=
COURSE_CODE="[A-Z]{2,3}[0-9]{3,4}[A-Z]?"
COURSE_NICK="[a-z]+[0-9]{2}"
@

To make a disjunct regex, we simply concatenate the lines with a pipe.
We must also make sure to not end with a pipe.
That is, turning
\begin{minted}{text}
DD1317
prgi23
\end{minted}
into
\begin{minted}{text}
(DD1317|prgi23)
\end{minted}
<<functions>>=
make_disjunct_regex() {
  echo -n "("
  tr '\n' '|' | sed 's/|$//'
  echo -n ")"
}
@ Let's test this on the example above.
\begin{pycode}
output = subprocess.run(
  "(echo DD1317; echo prgi23) | ./edumail make_disjunct_regex",
  shell=True, capture_output=True)
print_verbatim(output.stdout)
\end{pycode}

If we run this on the emails from the examples above, we should get the 
following output.
Running [[course]] on \cref{email1} should yield the following output:
\begin{pycode}
output = subprocess.run(["./edumail", "course", "email1.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}

Running [[course]] on \cref{email2} should yield the following output:
\begin{pycode}
output = subprocess.run(["./edumail", "course", "email2.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}
This is correct, since the email doesn't contain any course code.
Infact, \cref{email2} doesn't identify any course at all.


\section{Extracting assignments}

We also want to extract the assignments.
There are two alternatives: individual assignments or assignment groups (LADOK 
modules).

\subsection{Assignment groups}

The assignment groups are the easiest to extract, they're always named 
something like LAB1, LAB2, LAB3, \etc.
We can match those with a regex.
<<variables>>=
ASSIGNMENT_GROUP="[A-Z][A-Z][A-Z]+[0-9]+"
@

Now we'll do like we've done before and grep for these in the email, getting 
only the matching parts.
However, if we don't get anything, we'll use the regex itself as the output.
The reason is that this will match all assignment groups in Canvas and ignore 
any other assignment groups (\eg teaching material).

We also note that we must not match the course code, since those also fit the 
pattern in [[ASSIGNMENT_GROUP]].
<<functions>>=
assignment_groups() {
  local file=$(file_or_stdin "$1")
  local groups=$(clean "$file" \
                  | grep -Eo "${ASSIGNMENT_GROUP}" \
                  | grep -Ev "${COURSE_CODE}" \
                  | sort -u)
  if [[ -n "$groups" ]]; then
    echo "$groups"
  else
    echo "^${ASSIGNMENT_GROUP_DEFAULT}"
  fi | make_disjunct_regex
}
<<variables>>=
ASSIGNMENT_GROUP_DEFAULT="(LAB|INL|SEM)[0-9]+"
@

None of the examples (\cref{email1,email2}) contain any assignment groups.
But they do contain individual assignments.
\begin{example}[Assignment groups]\label{email3}
We can consider the following email that contains assignment groups.
\inputminted[highlightlines={2,5,13}]{text}{email3.txt}
This email should then yield the following output:
\begin{minted}{bash}
canvaslms submissions \
  -c ".*" \
  -u "^studuser@kth.se" \
  -A LAB2
\end{minted}
\end{example}

Let's test [[assignment_groups]] on \cref{email3} above.
It yields the following output:
\begin{pycode}
output = subprocess.run(["./edumail", "assignment_groups", "email3.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}

Let's also try it on \cref{email1} above.
\begin{pycode}
output = subprocess.run(["./edumail", "assignment_groups", "email1.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}

\subsection{Assignments}

For individual assignments we need a list of names to look for.
We can look at \cref{email3} again, since it has both an assignment and an 
assignment group.
But we will also revisit \cref{email1,email2}, since both have assignments (but 
no assignment groups).

The approach will be similar to that of [[assignment_groups]], but we'll have 
to grep for known assignment names.
<<functions>>=
assignments() {
  local file=$(file_or_stdin "$1")
  local assns=$(clean "$file" \
                | grep -iEo "${ASSIGNMENT}" \
                | sort -u)
  if [[ -n "$assns" ]]; then
    echo "$assns"
  else
    echo "^${ASSIGNMENT}"
  fi | make_disjunct_regex
}
@

The known assignments names are as follows.
<<variables>>=
ASSIGNMENT="granskn|lab(b|oration) ?[0-9]*|spec|redovisn|projekt|datorprov"
@

Let's test this on the emails from the examples above.
Running [[assignments]] on \cref{email1} yield the following output:
\begin{pycode}
output = subprocess.run(["./edumail", "assignments", "email1.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}
The output from \cref{email2} is the following:
\begin{pycode}
output = subprocess.run(["./edumail", "assignments", "email2.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}
The output from \cref{email3} is the following:
\begin{pycode}
output = subprocess.run(["./edumail", "assignments", "email3.txt"],
                        capture_output=True)
print_verbatim(output.stdout)
\end{pycode}


\section{Constructing the command lines}

Now that we have some building blocks, we can construct the command lines.
Since we can't get perfect results from the email, we'll use variables for the 
different identifiers.
That way we can easily correct them in one place, instead of several.
\begin{example}[Actually desired output]
In fact, we want the output of \cref{email1} to be the following.
\begin{pycode}
output = subprocess.run(["./edumail", "results", "email1.txt"],
                        capture_output=True)
print_verbatim(output.stdout.decode().strip())
\end{pycode}
This way, if there is any error in the identifiers, we can easily correct them 
in one place.
\end{example}

Now, the functions should be possible to use individually, but we don't want 
the same variables several times.
This gives us the following construction.
<<functions>>=
ladok() {
  <<output variables if not already done>>
  <<construct [[ladok]] command from email>>
}
canvas() {
  <<output variables if not already done>>
  <<construct [[canvaslms]] command from email>>
}
restlabb() {
  <<output variables if not already done>>
  <<construct restlabb command from email>>
}
missing() {
  <<output variables if not already done>>
  <<construct missing command from email>>
}
report() {
  <<output variables if not already done>>
  <<construct report command from email>>
}
@


\subsection{Generate the [[ladok]] command}

The [[ladok]] command is quite straight forward.
However, we need the course code for LADOK, not any identifier.
Then we can get the student identifier from Canvas.
Note that if the student is in several courses and the regex [[COURSE]] match, 
then we need to filter it down to one.
<<construct [[ladok]] command from email>>=
echo 'ladok student -c "${COURSE_CODE}" -r \'
echo '  $(canvaslms users -sc "${COURSE}" "${STUDENT}" -l \'
echo '      | cut -f 3 | uniq)'
@

\subsection{Generate the [[canvaslms]] command}

For the [[canvaslms]] command we can do some output modification to make it 
useful.
We usually don't need all columns in its output.
<<construct [[canvaslms]] command from email>>=
echo 'canvaslms submissions \'
echo '  -c "${COURSE}" \'
echo '  -a "${ASSIGN}" \'
echo '  -A "${ASSIGN_GRPS}" \'
echo '  -u "${STUDENT}" \'
echo '  | cut -f 2,4-'
@

\subsection{Generate the restlabb command}

We simply grep for the student in the restlabb export.
In fact, we want to make the same rewrites as the normal script does so that we 
can quickly report any missing results if needed.
Sometimes we miss a result because there are two results for the same student 
and same assignment in the same run.
We do this for all forms that we're interested in.
<<construct restlabb command from email>>=
echo "RESTLABB_FORMS='${RESTLABB_FORMS}'"
echo '(for form in ${RESTLABB_FORMS}; do kthutils forms export ${form}; done) \'
echo '  | grep "${STUDENT}" \'
echo '  | kthutils forms rewriter rewrite restlabb # cut -f 1,2,4,6,7'
@ Note that we inverse the quotes on the first line above, that's because we 
want to expand the variable [[RESTLABB_FORMS]] to include its value in the 
output.
@
Let's define the variables we need for handling restlabb.
We can simply look through all the forms that we have.
At least those that match \enquote{restlabb} and \enquote{labweek}.
<<variables>>=
RESTLABB_FORMS=$(kthutils config forms.added_forms \
                 | grep -iE "(restlabb|labweek)" \
                 | sed -En "s/^forms\.added_forms\.(.*) = .*$/\1/p")
@


\subsection{Generate the missing command}

We can use the [[canvaslms results -M]] command to output any missing 
assignments.
We want to change the default regex for passing grades ([[-F]]) to include the 
numbers too (for the mandatory surveys).
We also want to add a regex for the optional assignments ([[-O]]), which we 
prefix with \enquote{Optional:}.
<<construct missing command from email>>=
echo 'canvaslms results \'
echo '  -c "${COURSE}" \'
echo '  -A "${ASSIGN_GRPS}" \'
echo '  -u "${STUDENT}" \'
echo '  -M -F "([A-EP]|complete|[0-9.]+%?)" \
echo '     -O "^Optional:"'
@


\subsection{Generate the report command}

Then the reporting will be similar to the above, just without the [[-M]] flag.
<<construct report command from email>>=
echo 'canvaslms results \'
echo '  -c "${COURSE}" \'
echo '  -A "${ASSIGN_GRPS}" \'
echo '  -u "${STUDENT}" \'
echo '| sed -E "s/ ?[HV]T[0-9]{2}( \(.*\))?//"'
@ This output, in turn, can be piped to the [[ladok report -fv]] command.

\subsection{Outputting the variables}

We only want to output the variables if they haven't already been output.
To achieve this we'll use a flag variable.
<<output variables if not already done>>=
local file=$(file_or_stdin "$1")
if [[ -z "$VARS_ALREADY_OUTPUT" ]]; then
  VARS_ALREADY_OUTPUT=1
  echo "COURSE=\"$(course $file)\""
  echo "COURSE_CODE=\"$(course_code $file)\""
  echo "ASSIGN=\"$(assignments $file)\""
  echo "ASSIGN_GRPS=\"$(assignment_groups $file)\""
  echo "STUDENT=\"$(student $file)\""
fi
@

\subsection{Testing on the emails}

Let's test this on the emails from the examples above.
Running [[results]] on \cref{email1} now yields the following output:
\begin{pycode}
output = subprocess.run(["./edumail", "results", "email1.txt"],
                        capture_output=True)
print_verbatim(str(output.stdout, "utf-8"))
\end{pycode}
Running [[results]] on \cref{email2} now yields the following output:
\begin{pycode}
output = subprocess.run(["./edumail", "results", "email2.txt"],
                        capture_output=True)
print_verbatim(str(output.stdout, "utf-8"))
\end{pycode}

Finally, running [[results]] on \cref{email3} yields the following output:
\begin{pycode}
output = subprocess.run(["./edumail", "results", "email3.txt"],
                        capture_output=True)
print_verbatim(str(output.stdout, "utf-8"))
\end{pycode}


\printbibliography{}

\end{document}
